struct {{name}} {
{% for field in fields -%}
{{field.declaration}} {% if field.length==-1 -%} *{% endif -%} {{field.name}}{% if field.length>1 -%}[{{field.length}}]{% endif -%} {% if field.default_value != '' -%} = {{field.default_value}}{% endif %};
{% if field.length==-1 -%}size_t {{field.name}}_length;{% endif -%}
{% endfor -%}

{{name}}() = default;
{{name}}(const {{name}}&) = delete;
{{name}}(const {{ros_msg_type}} & msg, UnityAllocate allocator) {
{% for field in fields -%}
{% if 'string' == field.msg_type and field.length==1 -%}
{{field.name}} = (char *) allocator(strlen(msg.{{field.name}}.data())+1);
std::memset({{field.name}}, 0, strlen(msg.{{field.name}}.data())+1);
std::memcpy({{field.name}}, msg.{{field.name}}.data(), strlen(msg.{{field.name}}.data()));
{% elif 'string' == field.msg_type -%}
{{field.name}} = (char**) allocator(msg.{{field.name}}.size()*sizeof(char*));
{{field.name}}_length = msg.{{field.name}}.size();
for (auto i = 0ul; i < {{field.name}}_length; i++) {
  {{field.name}}[i] = (char *) allocator(strlen(msg.{{field.name}}[i].data())+1);
  std::memset({{field.name}}[i], 0, strlen(msg.{{field.name}}[i].data())+1);
  std::memcpy({{field.name}}[i], msg.{{field.name}}[i].data(), strlen(msg.{{field.name}}[i].data()));
}
{% elif field.length != 1 -%}
{% if field.length == -1 -%}
{{field.name}}_length = msg.{{field.name}}.size();
{{field.name}} = ({{field.declaration}}*) allocator(sizeof({{field.declaration}})*msg.{{field.name}}.size());
{% endif -%}
{% if field.msg_type in all_custom_types -%}
{{field.name}}_length = msg.{{field.name}}.size();
for (auto i = 0ul; i < {{field.name}}_length; i++) {
 {% if field.msg_type in all_custom_types -%}
 {{field.name}}[i] = {msg.{{field.name}}[i], allocator};
 {% else -%}
 {{field.name}}[i] = msg.{{field.name}}[i];
 {% endif -%}
}
{% else -%}
std::memcpy({{field.name}}, msg.{{field.name}}.data(), msg.{{field.name}}.size()*sizeof({{field.declaration}}));
{% endif -%}
{% else -%}
{% if field.msg_type in all_custom_types -%}
{{field.name}} = {msg.{{field.name}}, allocator};
{% else -%}
{{field.name}} = msg.{{field.name}};
{% endif -%}
{% endif -%}
{% endfor -%}
}
operator {{ros_msg_type}}(){
{{ros_msg_type}} msg;

{% for field in fields -%}
{% if field.default_value != '' -%}
{% elif field.length==-1 -%}
msg.{{field.name}}.resize({{field.name}}_length);
for (auto i = 0ul; i < {{field.name}}_length; i++) {
  msg.{{field.name}}[i] = {{field.name}}[i];
}
{% elif field.length>1 -%}
for (auto i = 0ul; i < {{field.length}}; i++) {
  msg.{{field.name}}[i] = {{field.name}}[i];
}
{% elif field.length==1 and 'string' == field.msg_type -%}
if ({{field.name}}) msg.{{field.name}} = {{field.name}};
{% else -%}
msg.{{field.name}} = {{field.name}};
{% endif -%}
{% endfor -%}

return msg;
}

} __attribute__((packed));